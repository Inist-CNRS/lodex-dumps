#!/usr/bin/env node

const fs = require('fs');
const shell = require('shelljs');
const { pipe } = require('ramda');
const config = require('./config.json');
const exporters = Object.keys(config);
const extensions = {
    'nquads': 'nq',
    'extendednquads': 'nq', // For old configuration LODEX
    'extendednquadscompressed': 'nq', // For old configuration LODEX
    'extended-nquads': 'nq',
    'extended-nquads-compressed': 'nq',
    'atom': 'atom',
    'csv': 'csv',
    'jsonallvalue': 'json',
    'jsonld': 'json',
    'jsonldcompacted': 'json', // For old configuration LODEX
    'tsv': 'tsv',
    'turtle': 'ttl'
}

const removeProtocol = url => url.replace(/^https?:\/\//, '');
const removeLastSlash = url => url.replace(/\/$/, '');
const addData = fileName => `data/${fileName}`;
const addNotice =  exporter => fileName => exporter.includes('extended') ? `${fileName}_notice` : fileName;
const addGraph = exporter => fileName => exporter.includes('nquads') ? `${fileName}_graph` : fileName;
const addExtension = exporter => fileName => `${fileName}.${extensions[exporter]}`;
const addGz = exporter => fileName => exporter.endsWith('compressed') ? `${fileName}.gz` : fileName;

const createPath = exporter => pipe(
    removeProtocol,
    removeLastSlash,
    addData,
    addNotice(exporter),
    addGraph(exporter),
    addExtension(exporter),
    addGz(exporter)
);

const isSupportedExporter = exporter => Object.keys(extensions).includes(exporter);

exporters
    .filter(isSupportedExporter)
    .forEach(exporter => {
        const createExportPath = createPath(exporter);

        config[exporter].forEach(lodexUrl => {
            const exportUrl = `${lodexUrl}api/export/${exporter}`;
            const exportPath = createExportPath(lodexUrl);
            console.log(`Getting ${lodexUrl} ${exporter} export...`);

            if (fs.access(exportPath, fs.constants.R_OK, (err) => {
                if (!err) { return; }
                // Get the export result into a data directory
                // -c for --continue start download from the beginning again when error
                shell.exec(`wget --local-encoding=UTF-8 --tries=2 -O ${exportPath} -c ${exportUrl}`);
            }));
        });
    });
